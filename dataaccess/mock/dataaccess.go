// Code generated by MockGen. DO NOT EDIT.
// Source: dataaccess.go

// Package mock is a generated GoMock package.
package mock

import (
	models "enterpret/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// FetchFeedbacks mocks base method.
func (m *MockDataStore) FetchFeedbacks(tenant, source string, page, size int) ([]models.FeedbackIngest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFeedbacks", tenant, source, page, size)
	ret0, _ := ret[0].([]models.FeedbackIngest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFeedbacks indicates an expected call of FetchFeedbacks.
func (mr *MockDataStoreMockRecorder) FetchFeedbacks(tenant, source, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFeedbacks", reflect.TypeOf((*MockDataStore)(nil).FetchFeedbacks), tenant, source, page, size)
}

// Store mocks base method.
func (m *MockDataStore) Store(ingest models.FeedbackIngest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ingest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockDataStoreMockRecorder) Store(ingest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDataStore)(nil).Store), ingest)
}
