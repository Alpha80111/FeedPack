// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package mock is a generated GoMock package.
package mock

import (
	sourceInterface "enterpret/sources/interface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSourceProcessor is a mock of SourceProcessor interface.
type MockSourceProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockSourceProcessorMockRecorder
}

// MockSourceProcessorMockRecorder is the mock recorder for MockSourceProcessor.
type MockSourceProcessorMockRecorder struct {
	mock *MockSourceProcessor
}

// NewMockSourceProcessor creates a new mock instance.
func NewMockSourceProcessor(ctrl *gomock.Controller) *MockSourceProcessor {
	mock := &MockSourceProcessor{ctrl: ctrl}
	mock.recorder = &MockSourceProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceProcessor) EXPECT() *MockSourceProcessorMockRecorder {
	return m.recorder
}

// GetProcessor mocks base method.
func (m *MockSourceProcessor) GetProcessor(source string) (sourceInterface.FeedbackProcessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessor", source)
	ret0, _ := ret[0].(sourceInterface.FeedbackProcessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessor indicates an expected call of GetProcessor.
func (mr *MockSourceProcessorMockRecorder) GetProcessor(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessor", reflect.TypeOf((*MockSourceProcessor)(nil).GetProcessor), source)
}
