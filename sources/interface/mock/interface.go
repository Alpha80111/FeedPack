// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "enterpret/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeedbackProcessor is a mock of FeedbackProcessor interface.
type MockFeedbackProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackProcessorMockRecorder
}

// MockFeedbackProcessorMockRecorder is the mock recorder for MockFeedbackProcessor.
type MockFeedbackProcessorMockRecorder struct {
	mock *MockFeedbackProcessor
}

// NewMockFeedbackProcessor creates a new mock instance.
func NewMockFeedbackProcessor(ctrl *gomock.Controller) *MockFeedbackProcessor {
	mock := &MockFeedbackProcessor{ctrl: ctrl}
	mock.recorder = &MockFeedbackProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackProcessor) EXPECT() *MockFeedbackProcessorMockRecorder {
	return m.recorder
}

// FetchAndStoreFeedbacks mocks base method.
func (m *MockFeedbackProcessor) FetchAndStoreFeedbacks(params models.Params, tenant string) ([]models.FeedbackIngest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndStoreFeedbacks", params, tenant)
	ret0, _ := ret[0].([]models.FeedbackIngest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndStoreFeedbacks indicates an expected call of FetchAndStoreFeedbacks.
func (mr *MockFeedbackProcessorMockRecorder) FetchAndStoreFeedbacks(params, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndStoreFeedbacks", reflect.TypeOf((*MockFeedbackProcessor)(nil).FetchAndStoreFeedbacks), params, tenant)
}

// IngestAndStoreFeedback mocks base method.
func (m *MockFeedbackProcessor) IngestAndStoreFeedback(blob []byte, tenant string) (models.FeedbackIngest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestAndStoreFeedback", blob, tenant)
	ret0, _ := ret[0].(models.FeedbackIngest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestAndStoreFeedback indicates an expected call of IngestAndStoreFeedback.
func (mr *MockFeedbackProcessorMockRecorder) IngestAndStoreFeedback(blob, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestAndStoreFeedback", reflect.TypeOf((*MockFeedbackProcessor)(nil).IngestAndStoreFeedback), blob, tenant)
}
